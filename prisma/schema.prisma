generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum VoteType {
  UP
  DOWN
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(uuid())
  name          String
  avatarUrl     String?
  createdAt     DateTime        @default(now())
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  role          UserRole        @default(USER)

  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
  books         Book[]
  readingStatus ReadingStatus[]

  votes         Vote[]  

  @@map("users")
}

model Book {
  id          String          @id @default(uuid())
  name        String
  author      String
  summary     String          @db.Text
  coverUrl    String
  publishingYear String?
  publisher String?
  language String?
  isbn String?
  totalPages  Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
  
  userId      String?
  user        User?           @relation(fields: [userId], references: [id], onDelete: Cascade)

  categories  CategoriesOnBooks[]
  ratings     Rating[]
  readingStatus ReadingStatus[]

  @@map("books")
}

model ReadingStatus {
  id        String   @id @default(uuid())
  status    String
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId]) 
  @@map("reading_status")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  books CategoriesOnBooks[]

  @@map("categories")
}

model CategoriesOnBooks {
  bookId    String
  categoryId String

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
  @@index([bookId])
  @@index([categoryId])
}

model Rating {
  id          String   @id @default(uuid())
  rate        Float
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  book    Book   @relation(fields: [bookId], references: [id])
  bookId  String

  user    User   @relation(fields: [userId], references: [id])
  userId  String

  votes         Vote[]  

  @@index([bookId])
  @@index([userId])
  @@map("ratings")
}

model Vote {
  id               String         @id @default(uuid())
  type             VoteType
  createdAt        DateTime       @default(now())

  userId           String
  user             User           @relation(fields: [userId], references: [id])

  ratingId         String
  rating    Rating   @relation(fields: [ratingId], references: [id], onDelete: Cascade)

  @@unique([userId, ratingId])

  @@map("votes")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}