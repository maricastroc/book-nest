generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  avatarUrl     String?
  createdAt     DateTime  @default(now())
  email         String?   @unique
  emailVerified DateTime?
  password      String?

  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
  books         Book[] // Adicionando o campo de relação

  @@map("users")
}

model Book {
  id          String   @id @default(uuid())
  name        String
  author      String
  summary     String   @db.Text
  coverUrl    String
  totalPages  Int
  createdAt   DateTime @default(now())
  
  userId      String? // Adicionando o campo userId
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  categories CategoriesOnBooks[]
  ratings    Rating[]

  @@map("books")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  books CategoriesOnBooks[]

  @@map("categories")
}

model CategoriesOnBooks {
  bookId    String
  categoryId String

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
  @@index([bookId])
  @@index([categoryId])
}

model Rating {
  id          String   @id @default(uuid())
  rate        Int
  description String   @db.Text
  createdAt   DateTime @default(now())

  book    Book   @relation(fields: [bookId], references: [id])
  bookId  String

  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@index([bookId])
  @@index([userId])
  @@map("ratings")
}

model Account {
  id                  String  @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refreshToken        String? @db.Text
  accessToken         String? @db.Text
  expiresAt           Int?
  tokenType           String?
  scope               String?
  idToken             String? @db.Text
  sessionState        String?
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}
